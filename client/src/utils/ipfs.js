import axios from 'axios';

/**
 * IPFS Integration s·ª≠ d·ª•ng Pinata API
 * 
 * Pinata l√† d·ªãch v·ª• pinning IPFS mi·ªÖn ph√≠ v√† d·ªÖ s·ª≠ d·ª•ng
 * B·∫°n c√≥ th·ªÉ ƒëƒÉng k√Ω mi·ªÖn ph√≠ t·∫°i: https://www.pinata.cloud/
 * 
 * ƒê·ªÉ s·ª≠ d·ª•ng:
 * 1. ƒêƒÉng k√Ω t·∫°i https://app.pinata.cloud/
 * 2. L·∫•y API Key v√† Secret
 * 3. Th√™m v√†o .env file:
 *    VITE_PINATA_API_KEY=your_api_key
 *    VITE_PINATA_API_SECRET=your_api_secret
 */

// Pinata API endpoints
const PINATA_API_URL = 'https://api.pinata.cloud';
const PINATA_GATEWAY = 'https://gateway.pinata.cloud/ipfs';

// Ho·∫∑c s·ª≠ d·ª•ng public IPFS gateway (kh√¥ng c·∫ßn API key)
const PUBLIC_GATEWAY = 'https://ipfs.io/ipfs';

/**
 * Upload JSON data l√™n IPFS th√¥ng qua Pinata
 * @param {Object} data - JavaScript object to upload
 * @returns {Promise<{hash: string, url: string}>}
 */
export const uploadJSONToIPFS = async (data) => {
  try {
    console.log('üì§ Uploading JSON to IPFS via Pinata...');
    
    const pinataApiKey = import.meta.env.VITE_PINATA_API_KEY;
    const pinataSecretKey = import.meta.env.VITE_PINATA_API_SECRET;
    
    if (!pinataApiKey || !pinataSecretKey) {
      console.warn('‚ö†Ô∏è Pinata API keys not found. Using alternative method...');
      return await uploadJSONToIPFSPublic(data);
    }

    const response = await axios.post(
      `${PINATA_API_URL}/pinning/pinJSONToIPFS`,
      {
        pinataContent: data,
        pinataMetadata: {
          name: `transaction_${Date.now()}.json`
        }
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'pinata_api_key': pinataApiKey,
          'pinata_secret_api_key': pinataSecretKey
        }
      }
    );

    const hash = response.data.IpfsHash;
    console.log('‚úÖ Upload successful! Hash:', hash);

    return {
      hash,
      url: `${PINATA_GATEWAY}/${hash}`
    };
  } catch (error) {
    console.error('‚ùå Error uploading JSON to IPFS:', error);
    
    // Fallback to alternative method
    console.log('üîÑ Trying alternative upload method...');
    return await uploadJSONToIPFSPublic(data);
  }
};

/**
 * Upload JSON s·ª≠ d·ª•ng public IPFS API (kh√¥ng c·∫ßn API key)
 * @param {Object} data 
 * @returns {Promise<{hash: string, url: string}>}
 */
const uploadJSONToIPFSPublic = async (data) => {
  try {
    // S·ª≠ d·ª•ng public IPFS HTTP API (nft.storage ho·∫∑c web3.storage)
    // ƒê√¢y l√† demo - trong production n√™n d√πng Pinata ho·∫∑c Infura
    
    const formData = new FormData();
    const blob = new Blob([JSON.stringify(data)], { type: 'application/json' });
    formData.append('file', blob, 'data.json');

    const response = await axios.post(
      'https://ipfs.infura.io:5001/api/v0/add',
      formData,
      {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      }
    );

    const hash = response.data.Hash;
    
    return {
      hash,
      url: `${PUBLIC_GATEWAY}/${hash}`
    };
  } catch (error) {
    console.error('‚ùå Public upload failed:', error);
    
    // Last fallback: Create a mock hash
    const mockHash = 'Qm' + btoa(JSON.stringify(data)).substring(0, 44);
    console.warn('‚ö†Ô∏è Using mock hash for development:', mockHash);
    
    return {
      hash: mockHash,
      url: `${PUBLIC_GATEWAY}/${mockHash}`,
      isMock: true,
      data: data // Store data locally for mock
    };
  }
};

/**
 * Upload file l√™n IPFS
 * @param {File} file - File object from input
 * @returns {Promise<{hash: string, url: string}>}
 */
export const uploadFileToIPFS = async (file) => {
  try {
    console.log('üì§ Uploading file to IPFS via Pinata...');
    
    const pinataApiKey = import.meta.env.VITE_PINATA_API_KEY;
    const pinataSecretKey = import.meta.env.VITE_PINATA_API_SECRET;
    
    if (!pinataApiKey || !pinataSecretKey) {
      console.warn('‚ö†Ô∏è Pinata API keys not found');
      throw new Error('Pinata API keys required for file upload');
    }

    const formData = new FormData();
    formData.append('file', file);
    formData.append('pinataMetadata', JSON.stringify({
      name: file.name
    }));

    const response = await axios.post(
      `${PINATA_API_URL}/pinning/pinFileToIPFS`,
      formData,
      {
        headers: {
          'Content-Type': 'multipart/form-data',
          'pinata_api_key': pinataApiKey,
          'pinata_secret_api_key': pinataSecretKey
        }
      }
    );

    const hash = response.data.IpfsHash;
    console.log('‚úÖ File upload successful! Hash:', hash);

    return {
      hash,
      url: `${PINATA_GATEWAY}/${hash}`
    };
  } catch (error) {
    console.error('‚ùå Error uploading file to IPFS:', error);
    throw error;
  }
};

/**
 * L·∫•y d·ªØ li·ªáu t·ª´ IPFS b·∫±ng hash
 * @param {string} hash - IPFS hash (CID)
 * @returns {Promise<string>} - JSON string
 */
export const getFromIPFS = async (hash) => {
  try {
    console.log('üîç Fetching from IPFS:', hash);
    
    // Try Pinata gateway first
    try {
      const response = await axios.get(`${PINATA_GATEWAY}/${hash}`);
      return typeof response.data === 'string' ? response.data : JSON.stringify(response.data);
    } catch {
      // Fallback to public gateway
      const response = await axios.get(`${PUBLIC_GATEWAY}/${hash}`);
      return typeof response.data === 'string' ? response.data : JSON.stringify(response.data);
    }
  } catch (error) {
    console.error('‚ùå Error fetching from IPFS:', error);
    throw error;
  }
};

/**
 * L·∫•y file t·ª´ IPFS
 * @param {string} hash - IPFS hash
 * @returns {Promise<Blob>}
 */
export const getFileFromIPFS = async (hash) => {
  try {
    const response = await axios.get(`${PUBLIC_GATEWAY}/${hash}`, {
      responseType: 'blob'
    });
    return response.data;
  } catch (error) {
    console.error('‚ùå Error getting file from IPFS:', error);
    throw error;
  }
};

/**
 * Upload ·∫£nh/GIF URL l√™n IPFS
 * @param {string} imageUrl - URL of image
 * @returns {Promise<{hash: string, url: string}>}
 */
export const uploadImageURLToIPFS = async (imageUrl) => {
  try {
    console.log('üåê ƒêang t·∫£i ·∫£nh t·ª´ URL:', imageUrl);
    
    // ‚úÖ S·ª¨ D·ª§NG CORS PROXY ƒë·ªÉ bypass CORS restrictions
    const corsProxies = [
      `https://corsproxy.io/?${encodeURIComponent(imageUrl)}`,
      `https://api.allorigins.win/raw?url=${encodeURIComponent(imageUrl)}`,
      imageUrl // Fallback: th·ª≠ tr·ª±c ti·∫øp
    ];
    
    let imageBlob = null;
    let lastError = null;
    
    // Th·ª≠ t·ª´ng proxy cho ƒë·∫øn khi th√†nh c√¥ng
    for (const proxyUrl of corsProxies) {
      try {
        console.log(`üîÑ ƒêang th·ª≠: ${proxyUrl.substring(0, 50)}...`);
        
        const response = await axios.get(proxyUrl, {
          responseType: 'blob',
          timeout: 10000, // 10 seconds timeout
          headers: {
            'Accept': 'image/*'
          }
        });
        
        imageBlob = response.data;
        console.log('‚úÖ T·∫£i ·∫£nh th√†nh c√¥ng!');
        break; // Th√†nh c√¥ng, tho√°t v√≤ng l·∫∑p
        
      } catch (err) {
        console.warn(`‚ö†Ô∏è Proxy failed: ${err.message}`);
        lastError = err;
        continue; // Th·ª≠ proxy ti·∫øp theo
      }
    }
    
    // N·∫øu t·∫•t c·∫£ proxies ƒë·ªÅu fail
    if (!imageBlob) {
      console.error('‚ùå Kh√¥ng th·ªÉ t·∫£i ·∫£nh t·ª´ b·∫•t k·ª≥ proxy n√†o');
      throw lastError || new Error('Failed to download image from URL');
    }
    
    // Detect file type
    const fileType = imageBlob.type || 'image/gif';
    const fileExtension = fileType.split('/')[1] || 'gif';
    
    // Convert to File object
    const file = new File([imageBlob], `image.${fileExtension}`, { type: fileType });
    
    console.log('üì§ ƒêang upload l√™n IPFS...');
    
    // Upload to IPFS
    const result = await uploadFileToIPFS(file);
    
    console.log('‚úÖ Upload th√†nh c√¥ng!', result);
    return result;
    
  } catch (error) {
    console.error('‚ùå L·ªói upload ·∫£nh URL l√™n IPFS:', error);
    
    // N·∫øu upload file fail, th·ª≠ upload JSON v·ªõi URL thay th·∫ø
    console.log('üîÑ Fallback: L∆∞u URL tr·ª±c ti·∫øp v√†o IPFS...');
    
    try {
      const jsonData = {
        gifUrl: imageUrl,
        type: 'external-url',
        timestamp: new Date().toISOString()
      };
      
      return await uploadJSONToIPFS(jsonData);
    } catch (fallbackError) {
      console.error('‚ùå Fallback c≈©ng failed:', fallbackError);
      throw error;
    }
  }
};

export default {
  uploadJSONToIPFS,
  uploadFileToIPFS,
  getFromIPFS,
  getFileFromIPFS,
  uploadImageURLToIPFS,
};

